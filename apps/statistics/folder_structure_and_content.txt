Folder structure and content for: /home/ngobiro/projects/moringa_capstone/apps/statistics

. __init__.py
  Content:


. admin.py
  Content:
  from django.contrib import admin
  
  # Register your models here.

. apps.py
  Content:
  from django.apps import AppConfig
  
  
  class StastisticsConfig(AppConfig):
      default_auto_field = 'django.db.models.BigAutoField'
      name = 'apps.statistics'
      label = 'statistics'

. components/
  . __init__.py
    Content:


  . case_summary.py
    Content:
    # views.py
    from django_unicorn.components import UnicornView
    from apps.statistics.models import DcrtData
    from django_pandas.io import read_frame
    from django.utils.html import format_html
    
    class CaseSummaryView(UnicornView):
        selected_column = None
        queryset = None
        columns = None 
        summary = {}
        shape = None
        df = None
    
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.queryset = DcrtData.objects.all()
            if self.queryset:
                df = read_frame(self.queryset)
                self.columns = df.columns.tolist()
                self.shape = df.shape
    
        def changeColumn(self):
            if self.selected_column and self.queryset:
                df = read_frame(self.queryset)
                self.summary = df[self.selected_column].describe().to_dict()
                self.shape = df.shape
                

  . dashboard.py
    Content:
    from django_unicorn.components import UnicornView
    from django.shortcuts import redirect
    from apps.statistics.models import UnitRank, FinancialYear, FinancialQuarter
    
    class DashboardView(UnicornView):
        court_rank = None
        financial_year = None
        quarter = None
        unit_ranks = None
        financial_years = None
        financial_quarters = None
    
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.unit_ranks = UnitRank.objects.all()
            self.financial_years = FinancialYear.objects.all()
            
        def changeCourtRank(self):
            if self.court_rank:
                self.financial_years = FinancialYear.objects.all()
                self.financial_year = None
                self.quarter = None
                self.financial_quarters = None
        
        def changeFinancialYear(self):
            if self.financial_year:
                # Get quarters and ensure dates are properly formatted
                self.financial_quarters = FinancialQuarter.objects.filter(
                    financial_year=self.financial_year
                ).order_by('quarter_number')
                self.quarter = None
        
        def changeQuarter(self):
            if self.quarter:
                return redirect('statistics:rank_units', 
                              self.court_rank, 
                              self.financial_year, 
                              self.quarter)

  . hello_magic.py
    Content:
    from django_unicorn.components import UnicornView
    
    
    class HelloMagicView(UnicornView):
        pass

  . hello_world.py
    Content:
    # hello_world.py
    from django_unicorn.components import UnicornView
    
    class HelloWorldView(UnicornView):
        name = "World"

. management/
  . commands/
    . check_data.py
      Content:
      # Create a new file: apps/statistics/management/commands/check_data.py
      
      from django.core.management.base import BaseCommand
      from apps.statistics.models import Unit, Division, UnitDivision
      
      class Command(BaseCommand):
          help = 'Check existing data in database'
      
          def handle(self, *args, **options):
              self.stdout.write("Checking existing data...")
              
              self.stdout.write("\nDivisions:")
              for division in Division.objects.all():
                  self.stdout.write(f"ID: {division.id}, Name: {division.name}")
                  
              self.stdout.write("\nUnits:")
              for unit in Unit.objects.all():
                  self.stdout.write(f"ID: {unit.id}, Name: {unit.name}")

    . populate_unit_ranks.py
      Content:
      from django.core.management.base import BaseCommand
      from apps.statistics.models import UnitRank
      
      class Command(BaseCommand):
          help = 'Populates the unit ranks table'
      
          def handle(self, *args, **options):
              unit_ranks = [
                  {'name': 'Supreme Court', 'is_court': True},
                  {'name': 'Court of Appeal', 'is_court': True},
                  {'name': 'High Court', 'is_court': True},
                  {'name': 'Employment and Labour Relations Court', 'is_court': True},
                  {'name': 'Environment and Land Court', 'is_court': True},
                  {'name': 'Magistrate Court', 'is_court': True},
                  {'name': 'Kadhi Court', 'is_court': True},
                  {'name': 'Tribunal', 'is_court': True},
                  {'name': 'Committee', 'is_court': False},
                  {'name': 'Library', 'is_court': False},
                  {'name': 'Directorate', 'is_court': False},
                  {'name': 'Other Office', 'is_court': False},
                  {'name': 'Small Claim', 'is_court': True},
              ]
      
              for rank in unit_ranks:
                  UnitRank.objects.create(name=rank['name'])
      
              self.stdout.write(self.style.SUCCESS('Successfully populated unit ranks.'))

    . seed_months.py
      Content:
      from django.core.management.base import BaseCommand
      from apps.statistics.models import Months
      
      class Command(BaseCommand):
          help = 'Seed months data'
      
          def handle(self, *args, **options):
              months_data = [
                  {'name': 'January', 'month_number': 31 ,"financial_quarter":3},
                  {'name': 'February', 'month_number': 28 ,"financial_quarter":3},
                  {'name': 'March', 'month_number': 31 ,"financial_quarter":3},
                  {'name': 'April', 'month_number': 30,"financial_quarter":4},
                  {'name': 'May', 'month_number': 31 ,"financial_quarter":4},
                  {'name': 'June', 'month_number': 30 ,"financial_quarter":4},
                  {'name': 'July', 'month_number': 31 ,"financial_quarter":1},
                  {'name': 'August', 'month_number': 31 ,"financial_quarter":1},
                  {'name': 'September', 'month_number': 30 ,"financial_quarter":1},
                  {'name': 'October', 'month_number': 31 ,"financial_quarter":2},
                  {'name': 'November', 'month_number': 30 ,"financial_quarter":2},
                  {'name': 'December', 'month_number': 31 ,"financial_quarter":2},
              ]
      
              for month_data in months_data:
                  Months.objects.create(
                      name=month_data['name'],
                      month_number=month_data['month_number'],
                      financial_quarter=month_data['financial_quarter']
                  )
      
              self.stdout.write(self.style.SUCCESS('Successfully seeded months data'))

    . seeddivisions.py
      Content:
      import csv
      from django.core.management.base import BaseCommand
      from apps.statistics.models import Division
      import os
      
      class Command(BaseCommand):
          help = 'Seed divisions data'
      
          def handle(self, *args, **options):
              Division.objects.all().delete()
              base = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
      
              with open(base + '/data/division.csv') as csvfile:
                  divisions_data = csv.reader(csvfile)
                  next(divisions_data)  # Skip header row
      
                  for data in divisions_data:
                      Division.objects.create(
                          name=data[1],
                          is_active=bool(int(data[2])),
                          code=data[3],
                          deleted_at=None if data[4] == 'NULL' else data[4]
                      )
      
              self.stdout.write(self.style.SUCCESS('Successfully seeded divisions data'))

    . seedfinancialdata.py
      Content:
      from django.core.management.base import BaseCommand
      
      from apps.statistics.seeder.financial_seeder import seed_financial_periods
      
      class Command(BaseCommand):
          help = 'Seed financial data into the database.'
      
          def handle(self, *args, **options):
              seed_financial_periods()
              self.stdout.write(self.style.SUCCESS('Financial data seeded successfully.'))

    . unit_division_seeder.py
      Content:
      from django.core.management.base import BaseCommand
      import os
      import csv
      from apps.statistics.models import UnitDivision, Unit, Division
      
      class Command(BaseCommand):
          help = 'Seed Unit Division data from CSV file'
      
          def handle(self, *args, **options):
              self.stdout.write("Starting Unit Division seeding...")
              
              # Clear existing data
              UnitDivision.objects.all().delete()
              self.stdout.write("Cleared existing Unit Division data")
      
              base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
      
              success_count = 0
              error_count = 0
              skipped_count = 0
              
              with open(base_dir + '/data/unit_division.csv') as csv_file:
                  csv_reader = csv.reader(csv_file)
                  header = next(csv_reader)  # Skip header row
                  
                  for row in csv_reader:
                      try:
                          unit_id = int(row[1])
                          division_id = int(row[2])
                          
                          # Check if Unit exists and can have divisions
                          try:
                              unit = Unit.objects.get(id=unit_id)
                              
                              # Skip if unit cannot have divisions
                              if not unit.has_division:
                                  self.stdout.write(f'Skipping unit {unit.name} (ID: {unit_id}) - Cannot have divisions')
                                  skipped_count += 1
                                  continue
                                  
                              division = Division.objects.get(id=division_id)
                              
                              # Create UnitDivision
                              UnitDivision.objects.create(
                                  id=int(row[0]),
                                  unit=unit,
                                  division=division,
                              )
                              success_count += 1
                              
                          except Unit.DoesNotExist:
                              self.stdout.write(self.style.ERROR(f'Unit with id {unit_id} does not exist'))
                              error_count += 1
                          except Division.DoesNotExist:
                              self.stdout.write(self.style.ERROR(f'Division with id {division_id} does not exist'))
                              error_count += 1
                          except Exception as e:
                              self.stdout.write(self.style.ERROR(f'Error processing row {row}: {str(e)}'))
                              error_count += 1
                              
                      except ValueError as e:
                          self.stdout.write(self.style.ERROR(f'Invalid data in row {row}: {str(e)}'))
                          error_count += 1
      
              self.stdout.write(self.style.SUCCESS(
                  f'Finished seeding Unit Divisions.\n'
                  f'Successfully processed: {success_count} records\n'
                  f'Skipped (no divisions allowed): {skipped_count} records\n'
                  f'Errors encountered: {error_count} records'
              ))

    . unit_seeder.py
      Content:
      from django.core.management.base import BaseCommand
      from apps.statistics.models import Unit
      import os
      import csv
      
      class Command(BaseCommand):
          help = 'Seed units from CSV file'
      
          def handle(self, *args, **options):
              Unit.objects.all().delete()  # Optional: Truncate the Unit table before seeding
              base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
              with open(base_dir + '/data/unit.csv') as csv_file:
                  csv_reader = csv.reader(csv_file)
                  next(csv_reader)  # Skip header row
                  for row in csv_reader:
                      Unit.objects.create(
                          id=row[0],
                          name=row[1],
                          unique_id=row[2],
                          unique_code=row[3],
                          unit_rank_id=row[4],
                          head_id_fk=row[5],
                          subhead_id_fk=row[6],
                      )
      
              self.stdout.write(self.style.SUCCESS('Successfully seeded units.'))
      
      
               

. models.py
  Content:
  from django.db import models
  
  # Create your models here.
  
  from django.db import models
  
  class UnitRank(models.Model):
      name = models.CharField(max_length=255)
      is_court = models.BooleanField(default=False)
  
  class FinancialYear(models.Model):
      name = models.CharField(max_length=255)
      start_date = models.DateTimeField()
      end_date = models.DateTimeField()
  
  class FinancialQuarter(models.Model):
      name = models.CharField(max_length=255)
      start_date = models.DateField()
      end_date = models.DateField()
      financial_year = models.ForeignKey('FinancialYear', on_delete=models.CASCADE)
      quarter_number = models.IntegerField(
          help_text='The financial quarter in which the month falls. It is either 1, 2, 3, or 4'
      )
  
      def get_quarter_name(self):
          """Format quarter name with dates in dd/mm/yyyy format"""
          if isinstance(self.start_date, str):
              return f"{self.name} ({self.start_date} - {self.end_date})"
          
          return "{} ({} - {})".format(
              self.name,
              self.start_date.strftime('%d/%m/%Y') if self.start_date else 'N/A',
              self.end_date.strftime('%d/%m/%Y') if self.end_date else 'N/A'
          )
  
      def __str__(self):
          return self.get_quarter_name()
      
  class Unit(models.Model):
      name = models.CharField(max_length=255)
      unique_id = models.CharField(max_length=255)
      unique_code = models.CharField(max_length=255)
      unit_rank = models.ForeignKey(UnitRank, on_delete=models.CASCADE)
      head_id_fk = models.IntegerField()
      subhead_id_fk = models.IntegerField()
      has_division = models.BooleanField(default=False)
      is_court = models.BooleanField(default=False)
      latitude = models.FloatField(default=0)
      longitude = models.FloatField(default=0)
  
  class Months(models.Model):
      name = models.CharField(max_length=255)
      month_number = models.IntegerField(help_text='Number of days in the month')
      # the financial quarter in which the month falls . it is either 1,2,3,4. 
      financial_quarter = models.IntegerField( help_text='The financial quarter in which the month falls. It is either 1, 2, 3, or 4')
  
  
  
      def __str__(self):
          return self.name
      
  class Division(models.Model):
      name = models.CharField(max_length=255)
      is_active = models.BooleanField(default=True)
      code = models.CharField(max_length=50)
      deleted_at = models.DateTimeField(null=True, blank=True)
  
      def __str__(self):
          return self.name
      
  # dcrt data Model
  class DcrtData(models.Model):
      # no constraints on foreign keys
  
      unit = models.ForeignKey(Unit, on_delete=models.CASCADE)
      financial_year = models.ForeignKey(FinancialYear, on_delete=models.CASCADE)
      financial_quarter = models.ForeignKey(FinancialQuarter, on_delete=models.CASCADE)
      month = models.ForeignKey(Months, on_delete=models.CASCADE)
      division = models.ForeignKey(Division, on_delete=models.CASCADE)
      today_date_day = models.IntegerField(null=True, blank=True)
      today_date_month = models.CharField(max_length=255, null=True, blank=True)
      today_date_year = models.CharField(max_length=255, null=True, blank=True)
      name_of_court = models.CharField(max_length=255, null=True, blank=True)
      case_number_code = models.CharField(max_length=255, null=True, blank=True)
      case_number_number = models.IntegerField(null=True, blank=True)
      case_number_day = models.IntegerField(null=True, blank=True)
      case_number_month = models.CharField(max_length=255, null=True, blank=True)
      case_number_year = models.IntegerField(null=True, blank=True)
      appeal_number_court_name = models.CharField(max_length=255, null=True, blank=True)
      appeal_number_code = models.CharField(max_length=255, null=True, blank=True)
      appeal_number_number = models.IntegerField(null=True, blank=True)
      appeal_number_year = models.IntegerField(null=True, blank=True)
      specific_case_type = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_1 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_2 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_3 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_4 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_5 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_6 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_7 = models.CharField(max_length=255, null=True, blank=True)
      judicial_officer_8 = models.CharField(max_length=255, null=True, blank=True)
      case_coming_for = models.CharField(max_length=255 ,null=True, blank=True)
      case_outcome = models.CharField(max_length=255, null=True, blank=True)
      adjournment_reason = models.CharField(max_length=255, null=True, blank=True)
      date_of_next_activity_day = models.IntegerField(null=True, blank=True)
      date_of_next_activity_month = models.CharField(max_length=255, null=True, blank=True)
      date_of_next_activity_year = models.IntegerField(null=True, blank=True)
      no_of_plaintiffs_or_appellants_male = models.IntegerField(null=True, blank=True)
      no_of_plaintiffs_or_appellants_female = models.IntegerField(null=True, blank=True)
      no_of_plaintiffs_or_appellants_organization = models.IntegerField(null=True, blank=True)
      no_of_defendants_accused_male = models.IntegerField(null=True, blank=True)
      no_of_defendants_accused_female = models.IntegerField(null=True, blank=True)
      no_of_defendants_accused_organization = models.IntegerField(null=True, blank=True)
      parties_have_legal_representation = models.CharField(max_length=255,null=True, blank=True)
      no_of_witnesses_in_court_d = models.IntegerField(null=True, blank=True)
      no_of_witnesses_in_court_w = models.IntegerField(null=True, blank=True)
      no_of_accused_remanded = models.IntegerField(null=True, blank=True)
      last_date_of_submission_of_case_file_day = models.CharField(max_length=255, null=True, blank=True)
      last_date_of_submission_of_case_file_month = models.CharField(max_length=255, null=True, blank=True)
      last_date_of_submission_of_case_file_year = models.CharField(max_length=255, null=True, blank=True)
      remarks = models.CharField(max_length=255, null=True, blank=True)
      
  class UnitDivision(models.Model):
      unit = models.ForeignKey(Unit, on_delete=models.CASCADE)
      division = models.ForeignKey(Division, on_delete=models.CASCADE)
  
  
  

. seeder/
  . financial_seeder.py
    Content:
    from datetime import datetime
    from django.utils import timezone
    from apps.statistics.models import FinancialYear, FinancialQuarter
    
    def seed_financial_periods():
        """Seed financial years and quarters with proper date handling"""
        
        financial_years = [
            {'name': '2018/2019', 'start_date': '2018-07-01', 'end_date': '2019-06-30', 'id': 1},
            {'name': '2019/2020', 'start_date': '2019-07-01', 'end_date': '2020-06-30', 'id': 2},
            {'name': '2020/2021', 'start_date': '2020-07-01', 'end_date': '2021-06-30', 'id': 3},
            {'name': '2021/2022', 'start_date': '2021-07-01', 'end_date': '2022-06-30', 'id': 4},
            {'name': '2022/2023', 'start_date': '2022-07-01', 'end_date': '2023-06-30', 'id': 5},
            {'name': '2023/2024', 'start_date': '2023-07-01', 'end_date': '2024-06-30', 'id': 6},
            {'name': '2024/2025', 'start_date': '2024-07-01', 'end_date': '2025-06-30', 'id': 7},
            {'name': '2025/2026', 'start_date': '2025-07-01', 'end_date': '2026-06-30', 'id': 8},
        ]
        
        for fy_data in financial_years:
            # Create financial year with datetime objects
            financial_year = FinancialYear.objects.create(
                name=fy_data['name'],
                start_date=datetime.strptime(fy_data['start_date'], '%Y-%m-%d').date(),
                end_date=datetime.strptime(fy_data['end_date'], '%Y-%m-%d').date()
            )
            
            # Define quarters
            quarters = [
                {
                    'name': 'Quarter 1',
                    'start_date': f"{financial_year.start_date.year}-07-01",
                    'end_date': f"{financial_year.start_date.year}-09-30",
                    'quarter_number': 1
                },
                {
                    'name': 'Quarter 2',
                    'start_date': f"{financial_year.start_date.year}-10-01",
                    'end_date': f"{financial_year.start_date.year}-12-31",
                    'quarter_number': 2
                },
                {
                    'name': 'Quarter 3',
                    'start_date': f"{financial_year.end_date.year}-01-01",
                    'end_date': f"{financial_year.end_date.year}-03-31",
                    'quarter_number': 3
                },
                {
                    'name': 'Quarter 4',
                    'start_date': f"{financial_year.end_date.year}-04-01",
                    'end_date': f"{financial_year.end_date.year}-06-30",
                    'quarter_number': 4
                }
            ]
            
            # Create quarters with proper date handling
            for quarter_data in quarters:
                FinancialQuarter.objects.create(
                    name=quarter_data['name'],
                    start_date=datetime.strptime(quarter_data['start_date'], '%Y-%m-%d').date(),
                    end_date=datetime.strptime(quarter_data['end_date'], '%Y-%m-%d').date(),
                    financial_year=financial_year,
                    quarter_number=quarter_data['quarter_number']
                )
        
        print("Financial periods seeded successfully.")

. templates/
  . unicorn/
    . case_summary.html
      Content:
      <div class="container mt-2" style="min-height: 100vh; background-color: #f8f9fa;">
              <p class="lead">Select a column to view its summary</p>
      
           <div class="row">
              <div class="col-md-3">
                  <div class="form-group">
                      <label for="exampleFormControlSelect1">Select Dataset</label>
                      <select class="form-control" id="df_name" name="df_name" unicorn:change="changeDataset" unicorn:model="selected_dataset">
                          <option value="">Select Dataset</option>
                          {% for df in dfs %}
                          <option value="{{ df }}">{{ df }}</option>
                          {% endfor %}
                      </select>
                  </div>
              </div>
          </div>
      
          <!-- shape is a tuple of (rows, columns) -->
          <div class="row">
              <h3>Shape</h3>
              
              <h3>{{ shape }}</h3>
          </div>
      
      
      
          <!-- drop down for columns . columns is df.columns -->
      
          <div class="row">
              <div class="col-md-3">
                  <div class="form-group">
                      <label for="exampleFormControlSelect1">Select Column</label>
                      <select class="form-control" id="df_column" name="df_column" unicorn:change="changeColumn" unicorn:model="selected_column">
                          <option value="">Select Column</option>
                          {% for column in columns %}
                          <option value="{{ column }}">{{ column }}</option>
                          {% endfor %}
                      </select>
                  </div>
              </div>
          </div>
      
      
      
      
          <h5>Summary Statistics</h5>
      
          <!-- summary is a dict of summary statistics. display as a table -->
      
          <table class="table table-striped">
              <thead>
                  <tr>
                      <th scope="col">Statistic</th>
                      <th scope="col">Value</th>
                  </tr>
              </thead>
              <tbody>
                  {% for key, value in summary.items %}
                  <tr>
                      <td>{{ key }}</td>
                      <td>{{ value }}</td>
                  </tr>
                  {% endfor %}
              </tbody>
          </table>
      
      
      </div>

    . dashboard.html
      Content:
      <div class="container mt-2" style="min-height: 100vh; background-color: #f8f9fa;">
          <h2 class="mb-4">Ranks</h2>
          <p class="lead">Select court rank, financial year, and quarter to proceed.</p>
      
          <div class="form-group">
              <label for="court_rank">Unit Rank</label>
              <select class="form-control" id="court_rank" name="court_rank" unicorn:change="changeCourtRank" unicorn:model="court_rank">
                  <option value="">Select Unit Rank</option>
                  {% for unit_rank in unit_ranks %}
                      <option value="{{ unit_rank.id }}">{{ unit_rank.name }}</option>
                  {% endfor %}
              </select>
          </div>
      
          <div class="form-group">
              <label for="financial_year">Financial Year</label>
              <select class="form-control" id="financial_year" name="financial_year" unicorn:change="changeFinancialYear" unicorn:model="financial_year" unicorn:disabled="!court_rank">
                  <option value="">Select Financial Year</option>
                  {% for financial_year in financial_years %}
                      <option value="{{ financial_year.id }}">{{ financial_year.name }}</option>
                  {% endfor %}
              </select>
          </div>
      
          <div class="form-group">
              <label for="quarter">FY Quarter</label>
              <select class="form-control" id="quarter" name="quarter" unicorn:model="quarter" unicorn:change="changeQuarter" unicorn:disabled="!financial_year">
                  <option value="">Select Quarter</option>
                  {% for quarter in financial_quarters %}
                      <option value="{{ quarter.id }}">{{ quarter.get_quarter_name }}</option>
                  {% endfor %}
              </select>
          </div>
      </div>
      

    . hello-magic.html
      Content:
      <div>
          <!-- put component code here -->
      </div>

    . hello-world.html
      Content:
      <!-- hello-world.html -->
      <div>
          <input unicorn:model="name" type="text" id="text" /><br />
          Hello {{ name|title }}
        </div>

. tests.py
  Content:
  from django.test import TestCase
  
  # Create your tests here.

. urls.py
  Content:
  # -*- encoding: utf-8 -*-
  """
  Copyright (c) 2019 - present AppSeed.us
  """
  
  from django.urls import path
  from apps.statistics import views
  
  app_name = "apps.statistics"
  
  urlpatterns = [
  
      # The home page
  
      path('', views.home, name='home'),
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units', views.rank_units, name='rank_units'),
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months', views.rank_unit_division_months, name='unit_division_months'),
      
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/dcrt_summary', views.rank_unit_division_month_cases_summary, name='unit_division_month_cases_summary'),
  
      # upload unit_monthly_dcrt_excel
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/upload_unit_monthly_dcrt_excel', views.upload_unit_monthly_dcrt_excel, name='upload_unit_monthly_dcrt_excel'),
  
      # case summary
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/case_summary', views.case_summary, name='monthly_unit_case_summary'),
  
  
      # remove missing values from dataset
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/monthly_unit_outliers', views.monthly_unit_outliers, name='monthly_unit_outliers'),
  
      # remove outliers from dataset
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/monthly_unit_missing_data', views.monthly_unit_missing_data, name='monthly_unit_missing_data'),
  
      # monthly_unit_duplicate_data
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/monthly_unit_duplicate_data', views.monthly_unit_duplicate_data, name='monthly_unit_duplicate_data'),
  
      # view missing values
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/monthly_unit_registered_cases', views.monthly_unit_registered_cases, name='monthly_unit_registered_cases'),
  
      # view outliers
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/cases/monthly_unit_resolved_cases', views.monthly_unit_resolved_cases, name='monthly_unit_resolved_cases'),
  
      # unit_division_quarters
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>', views.unit_division_quarters, name='unit_division_quarters'),
  
  
      # monthly_unit_matters_handled
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>', views.monthly_unit_matters_handled, name='monthly_unit_matters_handled'),
  
      #  monthly_unit_incomplete_data
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>/months/<int:month_id>/incomplete_data', views.monthly_unit_incomplete_data, name='monthly_unit_incomplete_data'),
  
  
      # unit_division_fy
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>/division/<int:division_id>', views.unit_division_fy, name='unit_division_fy'),
  
  
      # monthly_unit_duplicate_data
  
      path('rank/<int:id>/fy/<int:financial_year_id>/fq/<int:financial_quarter_id>/units/<int:unit_id>', views.monthly_unit_duplicate_data, name='monthly_unit_duplicate_data'),
      
  ]

. utils.py
  Content:
  import os
  import openpyxl
  from django.conf import settings
  from openpyxl.utils import get_column_letter
  from .models import DcrtData
  
  def handle_uploaded_file(excel_file, id, financial_year_id, financial_quarter_id, unit_id, division_id, month_id):
      # Define the destination directory within MEDIA_ROOT where the file will be saved
      destination = os.path.join(settings.MEDIA_ROOT, 'uploads', excel_file.name)
  
      # Open and save the file to the destination
      with open(destination, 'wb+') as destination_file:
          for chunk in excel_file.chunks():
              destination_file.write(chunk)
  
      # Load the uploaded Excel file
      workbook = openpyxl.load_workbook(destination)
      worksheet = workbook.active
  
      # Start reading data from row 6, column B
      for row in worksheet.iter_rows(min_row=6, min_col=2, values_only=True):
  
          # if all values in the row are None, stop reading
          if all([cell is None for cell in row]):
              break
          else:
          # Create a DcrtData object and populate its fields
              dcrt_data = DcrtData(
                  unit_id=unit_id,
                  financial_year_id=financial_year_id,
                  financial_quarter_id=financial_quarter_id,
                  month_id=month_id,
                  division_id=25,
                  today_date_day=row[0],
                  today_date_month=row[1],
                  today_date_year=row[2],
                  case_number_code = row[3],
                  case_number_number = row[4],
                  case_number_day = row[5],
                  case_number_month = row[6],
                  case_number_year = row[7],
                  appeal_number_court_name = row[8],
                  appeal_number_code = row[9],
                  appeal_number_number = row[10] if row[10] else None,
                  appeal_number_year = row[11] if row[11] else None,
                  specific_case_type = row[12],
                  judicial_officer_1 = row[13],
                  judicial_officer_2 = row[14],
                  judicial_officer_3 = row[15],
                  judicial_officer_4 = row[16],
                  judicial_officer_5 = row[17],
                  judicial_officer_6 = row[18],
                  judicial_officer_7 = row[19],
                  judicial_officer_8 = row[20],
                  case_coming_for = row[21],
                  case_outcome = row[22],
                  adjournment_reason = row[23],
                  date_of_next_activity_day = row[24] if row[24] else None,
                  date_of_next_activity_month = row[25] if row[25] else None,
                  date_of_next_activity_year = row[26] if row[26] else None,
                  no_of_plaintiffs_or_appellants_male = row[27] if row[27] else None,
                  no_of_plaintiffs_or_appellants_female = row[28] if row[28] else None,
                  no_of_plaintiffs_or_appellants_organization = row[29] if row[29] else None,
                  no_of_defendants_accused_male = row[30] if row[30] else None,
                  no_of_defendants_accused_female = row[31] if row[31] else None,
                  no_of_defendants_accused_organization = row[32] if row[32] else None,
                  parties_have_legal_representation = row[33] if row[33] else None,
                  no_of_witnesses_in_court_d = row[34] if row[34] else None,
                  no_of_witnesses_in_court_w = row[35] if row[35] else None,
                  no_of_accused_remanded = row[36] if row[36] else None,
                  last_date_of_submission_of_case_file_day = row[37] if row[37] else None,
                  last_date_of_submission_of_case_file_month = row[38] if row[38] else None,
                  last_date_of_submission_of_case_file_year = row[39] if row[39] else None,
                  remarks = row[40],
              )
              dcrt_data.save()
  
      # Return the path where the file was saved
      return destination

. views/
  . __init__.py
    Content:
    # apps/statistics/views/__init__.py
    
    from .dashboard import (
        home,
        rank_units,
    )
    
    from .case_analysis import (
        case_summary,
        monthly_unit_registered_cases,
    )
    
    from .unit_views import (
        rank_unit_division_months,
        unit_division_quarters,
        unit_division_fy,
    )
    
    from .data_quality import (
        monthly_unit_missing_data,
        monthly_unit_duplicate_data,
    )
    
    # Export all views
    __all__ = [
        # Dashboard views
        'home',
        'rank_units',
        
        # Case analysis views
        'case_summary',
        'monthly_unit_registered_cases',
        
        # Unit and division views
        'rank_unit_division_months',
        'unit_division_quarters',
        'unit_division_fy',
        
        # Data quality views
        'monthly_unit_missing_data',
        'monthly_unit_duplicate_data',
    ]

  . case_analysis.py
    Content:
    from django.shortcuts import render
    from django_pandas.io import read_frame
    from django.db.models import Count, Q
    from apps.statistics.models import (
        UnitRank, FinancialYear, FinancialQuarter,
        Unit, Division, DcrtData, Months
    )
    
    def case_summary(request, id, financial_year_id, financial_quarter_id, unit_id, division_id, month_id):
        """
        Comprehensive case summary and analysis view.
        """
        # Get base objects
        unit_rank = UnitRank.objects.get(id=id)
        fy = FinancialYear.objects.get(id=financial_year_id)
        fq = FinancialQuarter.objects.get(id=financial_quarter_id)
        unit = Unit.objects.get(id=unit_id)
        division = Division.objects.get(id=division_id)
        month = Months.objects.get(id=month_id)
    
        # Get filtered queryset
        queryset = DcrtData.objects.filter(
            financial_year=financial_year_id,
            financial_quarter=financial_quarter_id,
            unit=unit_id,
            division=division_id,
            month=month_id
        )
    
        # Convert to dataframe for analysis
        df = read_frame(queryset)
    
        context = {
            'unit_rank': unit_rank,
            'financial_year': fy,
            'financial_quarter': fq,
            'unit': unit,
            'division': division,
            'month': month,
            
            # Basic statistics
            'total_cases': len(df),
            'resolved_cases': len(df[df['case_outcome'].str.contains(
                'Resolved|Concluded|Completed', na=False, case=False, regex=True
            )]),
            'pending_cases': len(df[~df['case_outcome'].str.contains(
                'Resolved|Concluded|Completed', na=False, case=False, regex=True
            )]),
            
            # Case types analysis
            'case_types': [
                {
                    'type': case_type,
                    'count': count,
                    'percentage': round(count/len(df)*100, 1)
                }
                for case_type, count in df['specific_case_type'].value_counts().items()
            ],
            
            # Demographics
            'plaintiff_stats': {
                'male': df['no_of_plaintiffs_or_appellants_male'].sum(),
                'female': df['no_of_plaintiffs_or_appellants_female'].sum(),
                'org': df['no_of_plaintiffs_or_appellants_organization'].sum(),
            },
            'defendant_stats': {
                'male': df['no_of_defendants_accused_male'].sum(),
                'female': df['no_of_defendants_accused_female'].sum(),
                'org': df['no_of_defendants_accused_organization'].sum(),
            },
        }
        
        return render(request, 'statistics/case_summary.html', context)
    
    def monthly_unit_registered_cases(request, id, financial_year_id, financial_quarter_id, unit_id, division_id, month_id):
        """
        View for analyzing registered cases in a given month.
        """
        queryset = DcrtData.objects.filter(
            financial_year=financial_year_id,
            financial_quarter=financial_quarter_id,
            unit=unit_id,
            division=division_id,
            month=month_id,
            case_outcome__icontains='Case Registered/Filed'
        )
        
        df = read_frame(queryset)
        
        context = {
            'registered_cases': len(df),
            'registered_cases_by_type': df.groupby('case_number_code').size().to_dict(),
            'basic_info': {
                'unit_rank': UnitRank.objects.get(id=id),
                'financial_year': FinancialYear.objects.get(id=financial_year_id),
                'financial_quarter': FinancialQuarter.objects.get(id=financial_quarter_id),
                'unit': Unit.objects.get(id=unit_id),
                'division': Division.objects.get(id=division_id),
                'month': Months.objects.get(id=month_id),
            }
        }
        
        return render(request, 'statistics/monthly_unit_registered_cases.html', context)

  . dashboard.py
    Content:
    from django.shortcuts import render
    from django.db.models import Count, Q
    from apps.statistics.models import (
        UnitRank, FinancialYear, FinancialQuarter, 
        Unit, Division, DcrtData, Months
    )
    
    def home(request):
        """
        Dashboard view showing overall statistics and navigation options.
        """
        context = {
            'unit_ranks': UnitRank.objects.all(),
            'total_units': Unit.objects.count(),
            'active_divisions': Division.objects.filter(is_active=True).count(),
            'court_units': Unit.objects.filter(is_court=True).count(),
            'financial_year': FinancialYear.objects.first(),
            'financial_quarter': FinancialQuarter.objects.first(),
            
            # Add summary statistics
            'total_cases': DcrtData.objects.count(),
            'resolved_cases': DcrtData.objects.filter(
                case_outcome__icontains='Resolved'
            ).count(),
            'pending_cases': DcrtData.objects.exclude(
                case_outcome__icontains='Resolved'
            ).count(),
            
            # Get top case types
            'top_case_types': DcrtData.objects.values(
                'specific_case_type'
            ).annotate(
                count=Count('id')
            ).order_by('-count')[:5],
        }
        return render(request, 'statistics/home.html', context)
    
    def rank_units(request, id, financial_year_id, financial_quarter_id):
        """
        View for displaying units within a specific rank.
        """
        unit_rank = UnitRank.objects.get(id=id)
        fy = FinancialYear.objects.get(id=financial_year_id)
        fq = FinancialQuarter.objects.get(id=financial_quarter_id)
    
        # Get units with their case counts
        units = Unit.objects.filter(unit_rank=id).annotate(
            total_cases=Count('dcrtdata', filter=Q(
                dcrtdata__financial_year=financial_year_id,
                dcrtdata__financial_quarter=financial_quarter_id
            )),
            resolved_cases=Count('dcrtdata', filter=Q(
                dcrtdata__financial_year=financial_year_id,
                dcrtdata__financial_quarter=financial_quarter_id,
                dcrtdata__case_outcome__icontains='Resolved'
            ))
        )
    
        context = {
            'units': units,
            'unit_rank': unit_rank,
            'financial_year': fy,
            'financial_quarter': fq,
        }
        return render(request, 'statistics/rank_units.html', context)

  . data_quality.py
    Content:
    from django.shortcuts import render
    from django_pandas.io import read_frame
    import pandas as pd
    from apps.statistics.models import (
        UnitRank, FinancialYear, FinancialQuarter,
        Unit, Division, DcrtData, Months
    )
    
    def monthly_unit_missing_data(request, id, financial_year_id, financial_quarter_id, unit_id, division_id, month_id):
        """
        View for analyzing missing data in monthly reports.
        """
        queryset = DcrtData.objects.filter(
            financial_year=financial_year_id,
            financial_quarter=financial_quarter_id,
            unit=unit_id,
            division=division_id,
            month=month_id
        )
        
        df = read_frame(queryset)
        
        # Calculate missing values for each column
        missing_data = {
            column: {
                'missing_count': df[column].isna().sum(),
                'missing_percentage': round(df[column].isna().sum() / len(df) * 100, 2)
            }
            for column in df.columns
            if df[column].isna().sum() > 0
        }
        
        context = {
            'missing_data': missing_data,
            'total_records': len(df),
            'basic_info': {
                'unit_rank': UnitRank.objects.get(id=id),
                'financial_year': FinancialYear.objects.get(id=financial_year_id),
                'financial_quarter': FinancialQuarter.objects.get(id=financial_quarter_id),
                'unit': Unit.objects.get(id=unit_id),
                'division': Division.objects.get(id=division_id),
                'month': Months.objects.get(id=month_id),
            }
        }
        
        return render(request, 'statistics/monthly_unit_missing_data.html', context)
    
    def monthly_unit_duplicate_data(request, id, financial_year_id, financial_quarter_id, unit_id, division_id, month_id):
        """
        View for identifying duplicate entries in monthly data.
        """
        queryset = DcrtData.objects.filter(
            financial_year=financial_year_id,
            financial_quarter=financial_quarter_id,
            unit=unit_id,
            division=division_id,
            month=month_id
        )
        
        df = read_frame(queryset)
        
        

  . reports.py
    Content:


  . unit_views.py
    Content:
    from django.shortcuts import render
    from django.db.models import Count
    from apps.statistics.models import (
        UnitRank, FinancialYear, FinancialQuarter,
        Unit, Division, DcrtData, Months
    )
    
    def rank_unit_division_months(request, id, financial_year_id, financial_quarter_id, unit_id, division_id):
        """
        View for displaying months for a specific unit and division.
        """
        unit_rank = UnitRank.objects.get(id=id)
        fy = FinancialYear.objects.get(id=financial_year_id)
        fq = FinancialQuarter.objects.get(id=financial_quarter_id)
        unit = Unit.objects.get(id=unit_id)
        division = Division.objects.get(id=division_id)
    
        # Get months with case counts
        months = Months.objects.filter(
            financial_quarter=fq.quarter_number
        ).annotate(
            case_count=Count('dcrtdata', filter=Q(
                dcrtdata__financial_year=financial_year_id,
                dcrtdata__financial_quarter=financial_quarter_id,
                dcrtdata__unit=unit_id,
                dcrtdata__division=division_id
            ))
        )
    
        context = {
            'months': months,
            'unit_rank': unit_rank,
            'financial_year': fy,
            'financial_quarter': fq,
            'unit': unit,
            'division': division,
        }
        
        return render(request, 'statistics/rank_unit_months.html', context)
    
    def unit_division_quarters(request, id, financial_year_id, financial_quarter_id, unit_id, division_id):
        """
        View for quarterly statistics of a unit.
        """
        quarters = FinancialQuarter.objects.filter(
            financial_year=financial_year_id
        ).annotate(
            total_cases=Count('dcrtdata', filter=Q(
                dcrtdata__unit=unit_id,
                dcrtdata__division=division_id
            )),
            resolved_cases=Count('dcrtdata', filter=Q(
                dcrtdata__unit=unit_id,
                dcrtdata__division=division_id,
                dcrtdata__case_outcome__icontains='Resolved'
            ))
        )
    
        context = {
            'quarters': quarters,
            'basic_info': {
                'unit_rank': UnitRank.objects.get(id=id),
                'financial_year': FinancialYear.objects.get(id=financial_year_id),
                'unit': Unit.objects.get(id=unit_id),
                'division': Division.objects.get(id=division_id),
            }
        }
        
        return render(request, 'statistics/unit_division_quarters.html', context)
    
    def unit_division_fy(request, id, financial_year_id, financial_quarter_id, unit_id, division_id):
        """
        View for financial year statistics of a unit.
        """
        # Get yearly statistics
        yearly_stats = DcrtData.objects.filter(
            unit=unit_id,
            division=division_id,
            financial_year=financial_year_id
        ).aggregate(
            total_cases=Count('id'),
            resolved_cases=Count('id', filter=Q(case_outcome__icontains='Resolved')),
            male_plaintiffs=Sum('no_of_plaintiffs_or_appellants_male'),
            female_plaintiffs=Sum('no_of_plaintiffs_or_appellants_female'),
            org_plaintiffs=Sum('no_of_plaintiffs_or_appellants_organization'),
        )
    
        context = {
            'yearly_stats': yearly_stats,
            'basic_info': {
                'unit_rank': UnitRank.objects.get(id=id),
                'financial_year': FinancialYear.objects.get(id=financial_year_id),
                'unit': Unit.objects.get(id=unit_id),
                'division': Division.objects.get(id=division_id),
            }
        }
        
        return render(request, 'statistics/unit_division_fy.html', context)

