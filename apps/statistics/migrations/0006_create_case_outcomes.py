# Generated by Django 3.2.25 on 2025-04-07 15:28

from django.db import migrations, models
import django.db.models.deletion

# ELRC Case Outcomes
ELRC_OUTCOMES = [
    "Adjournment",
    "Case Registered/Filed",
    "Certified urgent",
    "Consent recorded",
    "Consent recorded - case closed",
    "Consolidated",
    "Consolidated- case closed",
    "Directions given",
    "Dismissed",
    "File transferred",
    "Hearing date set",
    "Judgment date given",
    "Judgment delivered",
    "Judgment on notice",
    "Matter Withdrawn",
    "Mention date set",
    "Not certified urgent",
    "Notices Issued",
    "Orders/Decree Issued",
    "Out of court settlement reached",
    "Ruling date given",
    "Ruling delivered",
    "Ruling delivered- case closed",
    "Struck out",
    "Terminated",
    "Written submissions filed",
    "Matter referred for mediation",
    "Matter referred for arbitration",
    "Last Submission(s) made",
    "Application Withdrawn",
    "Application Dismissed",
    "PO Upheld",
    "PO Dismissed"
]

def seed_case_outcomes(apps, schema_editor):
    """Seed initial case outcomes for ELRC"""
    CaseOutcome = apps.get_model('statistics', 'CaseOutcome')
    UnitRank = apps.get_model('statistics', 'UnitRank')
    db_alias = schema_editor.connection.alias

    # Get ELRC rank with ID 4
    try:
        elrc_rank = UnitRank.objects.using(db_alias).get(id=4)
    except UnitRank.DoesNotExist:
        print("Error: UnitRank with ID 4 (ELRC) not found!")
        return

    # Create outcomes
    created_count = 0
    for outcome_name in ELRC_OUTCOMES:
        outcome, created = CaseOutcome.objects.using(db_alias).get_or_create(
            name=outcome_name,
            unit_rank=elrc_rank,
            defaults={'description': f"ELRC outcome: {outcome_name}"}
        )
        if created:
            created_count += 1
            print(f"Created case outcome: {outcome_name}")

    print(f"\nCase outcomes seeding complete. Created {created_count} new outcomes for ELRC (Rank ID: 4)")

class Migration(migrations.Migration):

    dependencies = [
        ('statistics', '0005_convert_case_categories'),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit_rank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_outcomes', to='statistics.unitrank')),
            ],
            options={
                'verbose_name_plural': 'Case Outcomes',
                'ordering': ['unit_rank', 'name'],
                'unique_together': {('name', 'unit_rank')},
            },
        ),
        
        # Seed the ELRC outcomes
        migrations.RunPython(
            seed_case_outcomes,
            reverse_code=migrations.RunPython.noop
        ),
    ]