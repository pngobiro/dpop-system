# Generated by Django 3.2.25 on 2025-04-07 14:54

from django.db import migrations, models
import django.db.models.deletion
from collections import defaultdict # Import defaultdict

# --- Data Migration Function ---
def populate_new_fk_field(apps, schema_editor):
    """
    Populates the new 'case_activity_type' ForeignKey field based on the
    string value in the original 'case_coming_for' CharField.
    """
    DcrtData = apps.get_model('statistics', 'DcrtData')
    CaseActivityType = apps.get_model('statistics', 'CaseActivityType')
    db_alias = schema_editor.connection.alias

    # Create a mapping of (name, rank_id) to CaseActivityType ID
    # Use defaultdict to handle missing keys gracefully during lookup
    activity_map = defaultdict(lambda: None) 
    for cat in CaseActivityType.objects.using(db_alias).all():
         activity_map[(cat.name, cat.unit_rank_id)] = cat.id

    updated_count = 0
    null_count = 0
    
    print("\nPopulating DcrtData.case_activity_type (new FK) field...")
    # Iterate through DcrtData records using iterator for memory efficiency
    # Select related unit to get rank_id without extra queries per row
    for record in DcrtData.objects.using(db_alias).select_related('unit').iterator():
        activity_type_id = None
        if record.case_coming_for and record.unit: # Use original CharField value
            lookup_key = (record.case_coming_for, record.unit.unit_rank_id)
            activity_type_id = activity_map.get(lookup_key) 

        if activity_type_id:
            # Update the NEW fk field directly using _id suffix
            DcrtData.objects.using(db_alias).filter(pk=record.pk).update(case_activity_type_id=activity_type_id)
            updated_count += 1
        else:
            # Keep new FK field as NULL if no match found
            null_count += 1
            if record.case_coming_for: 
                 print(f"  Warning: No matching CaseActivityType for '{record.case_coming_for}' (Rank ID: {record.unit.unit_rank_id if record.unit else 'N/A'}). New FK ID set to NULL for DcrtData ID {record.pk}.")

    print(f"New FK population complete. Updated: {updated_count}, Set to NULL: {null_count}")


class Migration(migrations.Migration):

    dependencies = [
        ('statistics', '0002_auto_20250407_1453'),
    ]

    operations = [
        # Step 1: Add the new ForeignKey field with a temporary name
        migrations.AddField(
            model_name='dcrtdata',
            name='case_activity_type', # New temporary name
            field=models.ForeignKey(
                blank=True, 
                null=True, 
                on_delete=django.db.models.deletion.SET_NULL, 
                related_name='dcrt_data_temp_rel', # Temporary related name
                to='statistics.caseactivitytype'
            ),
        ),
        # Step 2: Run the function to populate the new FK field
        migrations.RunPython(populate_new_fk_field, reverse_code=migrations.RunPython.noop),
        
        # Step 3: Keep the AlterField for CaseActivityType.name (add unique=True)
        # This was generated automatically and should be fine here.
         migrations.AlterField(
             model_name='caseactivitytype',
             name='name',
             field=models.CharField(max_length=255, unique=True),
         ),
         
        # We will remove the old field and rename the new one in migration 0004
    ]
